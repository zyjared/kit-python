from typing import overload, Optional, Union
from .color import Color, ColorAbyss


class ColorStatic:

    @staticmethod
    def extend(style: Color) -> Color: ...
    @staticmethod
    def clean(style: Color) -> Color: ...

    # region Color

    @overload
    @staticmethod
    def bold(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def dim(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def italic(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def underline(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def through(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def reverse(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def blink(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def blink_fast(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def hidden(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    # fg
    def black(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def red(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def green(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def yellow(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def blue(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def magenta(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def cyan(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def white(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_black(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_red(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_green(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_yellow(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_blue(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_magenta(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_cyan(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bright_white(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    # bg
    def bg_black(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_red(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_green(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_yellow(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_blue(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_magenta(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_cyan(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_white(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_black(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_red(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_green(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_yellow(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_blue(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_magenta(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_cyan(text: Optional[Union[str | Color]]) -> Color: ...
    @overload
    @staticmethod
    def bg_bright_white(text: Optional[Union[str | Color]]) -> Color: ...

    # region ColorAbyss

    # styles

    @overload
    @staticmethod
    def bold(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def dim(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def italic(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def underline(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def through(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def reverse(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def blink(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def blink_fast(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def hidden(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    # fg
    def black(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def red(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def green(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def yellow(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def blue(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def magenta(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def cyan(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def white(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_black(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_red(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_green(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_yellow(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_blue(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_magenta(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_cyan(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bright_white(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    # bg
    def bg_black(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_red(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_green(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_yellow(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_blue(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_magenta(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_cyan(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_white(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_black(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_red(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_green(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_yellow(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_blue(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_magenta(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_cyan(text: ColorAbyss) -> ColorAbyss: ...
    @overload
    @staticmethod
    def bg_bright_white(text: ColorAbyss) -> ColorAbyss: ...
