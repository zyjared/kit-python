from typing import Self, Callable, Type


class StyleMeta(type):
    def __new__(cls: Type[Self], name: str, bases: tuple, dct: dict) -> Type[Self]: ...
    @staticmethod
    def _setup(cls: StyleMeta) -> None: ...
    @staticmethod
    def _gen_style_method(code: int, index: int) -> Callable[[Self], Self]: ...
    @staticmethod
    def _gen_color_method(color: str, _is_bg: bool = False) -> Callable[[Self], Self]: ...


class Style(metaclass=StyleMeta):

    text: str | None
    _seq: bytearray

    def __init__(self, text: str | None = ...) -> None: ...

    # TODO: When `__add__` return string, this method should be removed
    @staticmethod
    def _to_bytes(text: str | bytearray | bytes) -> bytes | bytearray: ...
    def _compose_styles(self) -> bytearray: ...

    def set_text(self, text: str) -> Self: ...
    def extend(self, src: Type[Self]) -> Self: ...
    def clean(self) -> Self: ...

    def to_str(self) -> str: ...
    def to_bytearray(self) -> bytearray: ...

    def __str__(self) -> str: ...
    def __format__(self, format_spec: str) -> str: ...
    def __add__(self, other: str | Style) -> str: ...
    def __radd__(self, other: str | Style) -> str: ...
    def __repr__(self) -> str: ...

    # styles

    def bold(self) -> Self: ...
    def dim(self) -> Self: ...
    def italic(self) -> Self: ...
    def underline(self) -> Self: ...
    def through(self) -> Self: ...
    def reverse(self) -> Self: ...
    def blink(self) -> Self: ...
    def blink_fast(self) -> Self: ...
    def hidden(self) -> Self: ...

    # fg

    def black(self) -> Self: ...
    def red(self) -> Self: ...
    def green(self) -> Self: ...
    def yellow(self) -> Self: ...
    def blue(self) -> Self: ...
    def magenta(self) -> Self: ...
    def cyan(self) -> Self: ...
    def white(self) -> Self: ...
    def bright_black(self) -> Self: ...
    def bright_red(self) -> Self: ...
    def bright_green(self) -> Self: ...
    def bright_yellow(self) -> Self: ...
    def bright_blue(self) -> Self: ...
    def bright_magenta(self) -> Self: ...
    def bright_cyan(self) -> Self: ...
    def bright_white(self) -> Self: ...

    # bg

    def bg_black(self) -> Self: ...
    def bg_red(self) -> Self: ...
    def bg_green(self) -> Self: ...
    def bg_yellow(self) -> Self: ...
    def bg_blue(self) -> Self: ...
    def bg_magenta(self) -> Self: ...
    def bg_cyan(self) -> Self: ...
    def bg_white(self) -> Self: ...
    def bg_bright_black(self) -> Self: ...
    def bg_bright_red(self) -> Self: ...
    def bg_bright_green(self) -> Self: ...
    def bg_bright_yellow(self) -> Self: ...
    def bg_bright_blue(self) -> Self: ...
    def bg_bright_magenta(self) -> Self: ...
    def bg_bright_cyan(self) -> Self: ...
    def bg_bright_white(self) -> Self: ...
